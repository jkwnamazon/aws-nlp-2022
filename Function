console.log('Loading event');
var AWS = require('aws-sdk');
var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});
var tableName = "dish_orders";

// Close dialog with the customer, reporting fulfillmentState of Failed or Fulfilled
function close(sessionAttributes, fulfillmentState, message) {
    return {
        sessionAttributes,
        dialogAction: {
            type: 'Close',
            fulfillmentState,
            message,
        },
    };
}

function storeRegistration(intent, callback) {

    let userInfo = {};

    // store every slot we received as part of order
    Object.keys(intent.currentIntent.slots).forEach((item) => {
        console.log(item)
        userInfo[item] = {"S": intent.currentIntent.slots[item]};
    });

    // store order info
    //userInfo.order_time = {"S": new Date().getTime().toString() };
    userInfo.order_id = {"S": intent.userId};
    
    dynamodb.putItem({
        "TableName": tableName,
        "Item" : userInfo
    }, function(err, data) {
        if (err) {
            console.log('Failure storing user info');
            console.log(err);
            callback(close(intent.sessionAttributes, 'Fulfilled',
            {'contentType': 'PlainText', 'content': "I am sorry, but something went wrong saving your order. Please try again."}));
        } else {
            console.log("Successfully Stored UserInfo");
            callback(close(intent.sessionAttributes, 'Fulfilled',
            {'contentType': 'PlainText', 'content': "Thank you for your order, your dishes will be ready shortly! \n\nNow you can login into the AWS WorkMail to see the automated order notification sent by AWS Lambda and Simple Email Service(SES), please get the email login user name and password from the Innovation Hub See Detail Page!"}));
        }
    });
} 

// --------------- Main handler -----------------------
 
// Route the incoming request based on intent.
// The JSON body of the request is provided in the event slot.
exports.handler = (event, context, callback) => {
    console.log(event);
    try {
        storeRegistration(event,
            (response) => {
                callback(null, response);
            });
    } catch (err) {
        callback(err);
    }
};